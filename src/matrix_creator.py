from itertools import product

import numpy as np
import pandas as pd


# Группировка схожих категорий вручную
detailed_groups = {
    "единоборства": ["Бокс", "Кикбоксинга", "Дзюдо", "Тайский", "Айкидо", "Джиу-джитсу", "Карате", "Самбо", "Тхэквондо", "Рукопашной", "Самообороны", "Кудо", "Греко-римской", "Вольной", "Армрестлинга"],
    "фитнес и тренировки": ["Аэробика", "Зумба", "Стретчинг", "Фитнес", "Йога", "Пилатес", "Кроссфит", "Силовые", "Тренажёрный", "Функциональный", "Кардиотренировки", "Интервальная", "Табата", "Сайкл", "Фитбол"],
    "водные виды спорта": ["Бассейн", "Аквааэробика", "Плавание", "Водные", "Водного", "Воде", "Поло"],
    "массаж и релаксация": ["Массаж", "СПА", "Сауна", "Лимфодренажный", "Гидромассаж", "Антицеллюлитный", "Расслабляющий", "Русская", "Турецкая", "Хамам", "Джакузи", "Прессотерапия"],
    "танцы": ["Танцы", "Джаз-фанк", "Стрип-пластика", "Танго", "Тверка", "Сальсы", "Брейк-данса", "Латиноамериканские", "Бальный", "Балетная", "Бачаты", "Современных", "Вальса", "Дэнс", "Джаз-модерн"],
    "игровые виды спорта": ["Бадминтона", "Баскетбол", "Волейбол", "Тенниса", "Футбол", "Хоккея", "Регби", "Гандбол", "Настольный", "Пинг-понг", "Мини-футбола"],
    "гимнастика и акробатика": ["Гимнастика", "Художественной", "Акробатика", "Боди-балет", "Айенгара"],
    "оздоровительные и терапевтические занятия": ["ЛФК", "Медитация", "Йогатерапия", "Реабилитация", "Оздоровительный", "Кинезитерапия", "Терапия", "Техники", "Дыхательные"],
    "экстремальные виды спорта": ["Скалолазания", "Экстремальных", "Воркаут"],
    "специфические направления": ["Черлидинга", "Танцев", "Фитнес-инструкторов", "Физическая", "Персональные", "Профессиональные", "Спортсменов", "Тренинг"],
}

# Функция обновлена для более точной оценки
def get_detailed_similarity(cat1, cat2):
    if cat1 == cat2:
        return 0  # Идентичные услуги
    for group in detailed_groups.values():
        if cat1 in group and cat2 in group:
            return 15  # Очень схожие
    return 100  # Разные услуги

# Создание новой матрицы
matrix_detailed = np.zeros((len(detailed_groups), len(detailed_groups)))

for i, j in product(range(len(detailed_groups)), repeat=2):
    matrix_detailed[i, j] = get_detailed_similarity(detailed_groups[i], detailed_groups[j])

# Сохранение
df_detailed = pd.DataFrame(matrix_detailed, index=detailed_groups, columns=detailed_groups)
csv_path_detailed = "/mnt/data/matrix_similarity_detailed.csv"
df_detailed.to_csv(csv_path_detailed, encoding="utf-8")

csv_path_manual
